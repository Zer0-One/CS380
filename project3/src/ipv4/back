#include <arpa/inet.h>
#include <errno.h>
#include <math.h>
#include <netdb.h>
#include <netinet/ip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define BUFFER_SIZE 2048
#define HOST "45.50.5.238"
#define PORT "38003"
#define IP_VERSION 4
#define IPV4_HEADER_LENGTH 20

uint16_t checksum(uint16_t* header, int length){
    uint32_t sum = 0;

    while(length > 0){
        //sum += 
    }

    return ~sum;
}

void send_v4_packet(size_t data_size, int sockfd, struct addrinfo* addr){
    struct iphdr ip_header;
    uint32_t daddr, saddr;
    inet_pton(AF_INET, HOST, &daddr);
	inet_pton(AF_INET, HOST, &saddr);
    uint8_t* packet = malloc(IPV4_HEADER_LENGTH + data_size);

    ip_header.ihl = IPV4_HEADER_LENGTH / 4; //number of 32-bit words in the header
    ip_header.version = IP_VERSION; //IP version
    ip_header.tos = 0; //type of service
    //ip_header.tot_len = IPV4_HEADER_LENGTH + data_size; //total packet length
    ip_header.id = 0; //sequence number. we don't care, since it's only 1 packet
    ip_header.frag_off = 0; //fragment offset
    ip_header.ttl = 64; //time-to-live
    ip_header.protocol = IPPROTO_UDP; //transport layer protocol
    //ip_header.saddr = saddr;
    ip_header.daddr = htonl(daddr);
    //ip_header.check = 0;
    //ip_header.check = checksum(&ip_header, IPV4_HEADER_LENGTH);
    memcpy(packet, &ip_header, IPV4_HEADER_LENGTH);

    sendto(sockfd, packet, data_size, 0, addr->ai_addr, addr->ai_addrlen);
}

int main(){
	char buffer[BUFFER_SIZE];
    int sockfd; 
    if((sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1){
        printf("Error: Could not create raw socket: %s\n", strerror(errno));
        _exit(-1);
    }
    int optval = 1;
    if(setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL, &optval, sizeof(optval)) == -1){
        printf("Error: Could not set IP_HDRINCL socket option: %s\n", strerror(errno));
        _exit(-1);
    }

    struct addrinfo hints, *result;
    memset(&hints, 0, sizeof(hints));
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_DGRAM;

    int s = getaddrinfo(HOST, PORT, &hints, &result);
    if(s != 0){
        printf("Error: Could not get address info: %s\n", strerror(errno));
        _exit(-1);
    }

    for(int i = 1; i < 13; i++){
        printf("Sending IPv4 packet of size: %d\n", (int)pow(2, i));
        send_v4_packet(i, sockfd, result);
		while(recv(sockfd, buffer, BUFFER_SIZE, 0) > 0){
			printf("%s", buffer);
		}
		printf("\n");
        sleep(2);
    }
    return 0;
}
